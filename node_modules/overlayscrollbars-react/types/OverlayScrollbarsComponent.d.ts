import type { OverlayScrollbars } from 'overlayscrollbars';
import type { PartialOptions, EventListeners } from 'overlayscrollbars';
import type { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react';
type OverlayScrollbarsComponentBaseProps<T extends keyof JSX.IntrinsicElements> = ComponentPropsWithoutRef<T> & {
    /** Tag of the root element. */
    element?: T;
    /** OverlayScrollbars options. */
    options?: PartialOptions | false | null;
    /** OverlayScrollbars events. */
    events?: EventListeners | false | null;
    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */
    defer?: boolean | IdleRequestOptions;
};
export type OverlayScrollbarsComponentProps<T extends keyof JSX.IntrinsicElements = 'div'> = OverlayScrollbarsComponentBaseProps<T> & {
    ref?: ForwardedRef<OverlayScrollbarsComponentRef<T>>;
};
export interface OverlayScrollbarsComponentRef<T extends keyof JSX.IntrinsicElements = 'div'> {
    /** Returns the OverlayScrollbars instance or null if not initialized. */
    osInstance(): OverlayScrollbars | null;
    /** Returns the root element. */
    getElement(): ElementRef<T> | null;
}
declare const OverlayScrollbarsComponent: <T extends keyof JSX.IntrinsicElements>(props: OverlayScrollbarsComponentBaseProps<T>, ref: ForwardedRef<OverlayScrollbarsComponentRef<T>>) => import("react/jsx-runtime").JSX.Element;
declare const OverlayScrollbarsComponentForwardedRef: <T extends keyof JSX.IntrinsicElements>(props: OverlayScrollbarsComponentProps<T>) => ReturnType<typeof OverlayScrollbarsComponent>;
export { OverlayScrollbarsComponentForwardedRef as OverlayScrollbarsComponent };
